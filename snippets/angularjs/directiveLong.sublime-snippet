<snippet>
  <content><![CDATA[
directive('${1:name}', $1);

//---

// https://docs.angularjs.org/guide/directive
// https://docs.angularjs.org/api/ng/service/\$compile

${4:$1.\$inject = [${2/(?:.+)/'/g}${2/,[ ]*/', '/g}${2/(?:.+)/',/g} $3];
}
function $1($2) {

  var scope = {
    max: '='$5
  };

  var directive = {
    restrict: 'EA$6',
    scope: scope,

    controller: ControllerFn,
    controllerAs: 'vm$7',
    // So our isolated scope will be stored
    // on the `this` context of our controller
    // instead of $scope
    bindToController: true,

    link: linkingFn,

    template: templateFn,
    templateUrl: templateUrlFn
  };

  return directive;

  //---

  // ControllerFn.\$inject = [];

  function ControllerFn() {
    var vm = this;$0

    vm.min = 3; 
    console.log('CTRL: vm.min = %i', vm.min);
    console.log('CTRL: vm.max = %i', vm.max);
  }

  //---

  function linkingFn(scope, el, attr, ctrl) {
    console.log('LINK: scope.max = %i', scope.max);
    console.log('LINK: scope.vm.min = %i', scope.vm.min);
    console.log('LINK: scope.vm.max = %i', scope.vm.max);
  }

  //---

  function templateFn(tElement, tAttrs) {
    return [
      '<div>min: {{vm.min}} :: max: {{vm.max}}</div>'
    ].join('');
  }

  //---

  function templateUrlFn(tElement, tAttrs) {
    return 'path/directive/template.html';
  }

}
]]></content>
  <tabTrigger>directivelong</tabTrigger>
  <scope>source.js</scope>
  <description>Angular.js</description>
</snippet>
